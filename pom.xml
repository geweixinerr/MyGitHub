<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<groupId>com</groupId>
	<artifactId>MySpring</artifactId>
	<version>${project.release.version}</version>
	<name>Spring Project</name>
	<description>我的Spring Maven项目</description>
   
   <!-- 引入主POM,此处只为测试-->
   <!-- 
    <parent>
   		<groupId>com</groupId>
		<artifactId>MySpringMainPom</artifactId>
		<version>1.0</version>
        <relativePath>main-pom.xml</relativePath>
    </parent>
    -->

	<properties>
		<project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
		<project.release.version>0.0.1-SNAPSHOT</project.release.version>
	</properties>

	<dependencies>
		<!-- Spring依赖 -->
		<!-- 1.Spring核心依赖 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-core</artifactId>
			<version>4.3.7.RELEASE</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-beans</artifactId>
			<version>4.3.7.RELEASE</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-context</artifactId>
			<version>4.3.7.RELEASE</version>
		</dependency>
		
		<!-- 2.Spring dao依赖 -->
		<!-- spring-jdbc包括了一些如jdbcTemplate的工具类 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-jdbc</artifactId>
			<version>4.3.7.RELEASE</version>
		</dependency>
		
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-tx</artifactId>
			<version>4.3.7.RELEASE</version>
		</dependency>
		
		<!-- 3.Spring web依赖 -->
		<!-- 
		<dependency> 
		    <groupId>org.springframework</groupId> 
		    <artifactId>spring-web</artifactId> 
			<version>4.3.7.RELEASE</version> 
		</dependency>
		
		<dependency> 
		     <groupId>org.springframework</groupId> 
			 <artifactId>spring-webmvc</artifactId> 
			 <version>4.3.7.RELEASE</version> 
		</dependency> 
		-->
			
		<!-- 4.Spring test依赖：方便做单元测试和集成测试 -->
		<dependency>
			<groupId>org.springframework</groupId>
			<artifactId>spring-test</artifactId>
			<version>4.3.7.RELEASE</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-lang3</artifactId>
			<version>3.8.1</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/org.apache.commons/commons-collections4 -->
		<dependency>
			<groupId>org.apache.commons</groupId>
			<artifactId>commons-collections4</artifactId>
			<version>4.2</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/commons-beanutils/commons-beanutils -->
		<dependency>
			<groupId>commons-beanutils</groupId>
			<artifactId>commons-beanutils</artifactId>
			<version>1.9.3</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/commons-codec/commons-codec -->
		<dependency>
			<groupId>commons-codec</groupId>
			<artifactId>commons-codec</artifactId>
			<version>1.11</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/commons-io/commons-io -->
		<dependency>
			<groupId>commons-io</groupId>
			<artifactId>commons-io</artifactId>
			<version>2.6</version>
		</dependency>

		<!-- logback start -->
		<dependency>
			<groupId>ch.qos.logback</groupId>
			<artifactId>logback-classic</artifactId>
			<version>1.1.3</version>
		</dependency>
		
		<!-- logback-ext-spring是由官方提供的对Spring的支持，它的作用就相当于log4j中的Log4jConfigListener -->
		<dependency>
			<groupId>org.logback-extensions</groupId>
			<artifactId>logback-ext-spring</artifactId>
			<version>0.1.2</version>
		</dependency>
		
		<dependency>
			<groupId>org.slf4j</groupId>
			<artifactId>jcl-over-slf4j</artifactId>
			<version>1.7.12</version>
		</dependency>
		<!-- logback end -->

		<!-- https://mvnrepository.com/artifact/cglib/cglib -->
		<dependency>
			<groupId>cglib</groupId>
			<artifactId>cglib</artifactId>
			<version>3.2.8</version>
		</dependency>

		<!-- https://mvnrepository.com/artifact/junit/junit -->
		<dependency>
			<groupId>junit</groupId>
			<artifactId>junit</artifactId>
			<version>4.12</version>
		</dependency>

		<!-- 线程安全的,更强大的日期API -->
		<!-- https://mvnrepository.com/artifact/joda-time/joda-time -->
		<dependency>
			<groupId>joda-time</groupId>
			<artifactId>joda-time</artifactId>
			<version>2.10</version>
		</dependency>
		
		<dependency>
		  <groupId>io.netty</groupId>
		  <artifactId>netty-all</artifactId>
		  <version>4.1.9.Final</version>
		</dependency>
		
		<!-- https://mvnrepository.com/artifact/org.jboss.marshalling/jboss-marshalling -->
		<dependency>
			<groupId>org.jboss.marshalling</groupId>
			<artifactId>jboss-marshalling</artifactId>
			<version>2.0.6.Final</version>
		</dependency>
			
		<!-- https://mvnrepository.com/artifact/org.jboss.marshalling/jboss-marshalling-serial -->
		<dependency>
		    <groupId>org.jboss.marshalling</groupId>
		    <artifactId>jboss-marshalling-serial</artifactId>
		    <version>2.0.6.Final</version>
		    <!-- 
		    <scope>test</scope>
		     -->
		</dependency>
		
	</dependencies>

	<!-- 添加项目jdk编译插件 -->
	<build>
		<plugins>
			<!-- 
				tomcat:deploy(部署一个web war包)
				tomcat:reload(重新加载web war包)
				tomcat:start(启动tomcat)
				tomcat:stop(停止tomcat)
				tomcat:undeploy(停止一个web war包)
				tomcat:run(启动嵌入式tomcat,并启动当前项目)
			 -->
			<plugin>
				<groupId>org.apache.tomcat.maven</groupId>
				<artifactId>tomcat7-maven-plugin</artifactId>
				<version>2.1</version>
				<configuration>
				   <port>9090</port>
				   <path>/webApp</path>
				   <uriEncoding>UTF-8</uriEncoding>
				   <charset>UTF-8</charset>
 				</configuration>
			</plugin>
			
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-compiler-plugin</artifactId>
				<version>3.8.0</version>
				<configuration>
					<source>1.8</source>
					<target>1.8</target>
					<encoding>UTF-8</encoding>
				</configuration>
			</plugin>

           <!-- 打包插件 -->
           <!--  
			<plugin>
				<groupId>org.apache.maven.plugins</groupId>
				<artifactId>maven-assembly-plugin</artifactId>
				<version>3.0.0</version>
				<configuration>
					<archive>
						<manifest>
							<mainClass>com.vvvtimes.server.MainServer</mainClass>
						</manifest>
					</archive>
					<descriptorRefs>
						<descriptorRef>jar-with-dependencies</descriptorRef>
					</descriptorRefs>
				</configuration>
				<executions>
					<execution>
						<id>make-assembly</id>
						<phase>package</phase>
						<goals>
							<goal>single</goal>
						</goals>
					</execution>
				</executions>
			</plugin>
           -->
		</plugins>

		<!-- 资源属性文件替换 -->
		<!-- 我们分析下<resource>下面的属性 <directory>: 配置那个目录下的文件通过${key}会被替换成属性值,resource目录下，我们一般放jdbc连接，或配置文件 
			<includes>：指定那个目录下那个文件 <filtering>：这个配置的意思是过滤上面指定属性文件中的占位符，占位符是${变量名称}这样的形式，maven会自动读取配置文件， 
			然后解析其中的占位符，使用上面pom文件中定义的属性进行替换 <exclueds>：在resource目录下，有很多文件，但用些文件不希望替换，则可以通过<excluede>指定 
			<filters>:这里的filters与<profile>的filter意思一样，都是指属性文件地址， 这个如果上面定义<profile>的时候指定了，这里就不需要了，但有些开发习惯是在<profile>不定义，然后在<build>里指定。 -->
		<resources>
			<resource>
				<directory>src/main/resources</directory>
				<includes>
					<include>**/*</include>
					<!-- <include>*.xml</include> <include>init.properties</include> -->
				</includes>
				<filtering>true</filtering>
				<!-- 排除文件 -->
				<!-- <excludes> <exclude>application.properties</exclude> </excludes> -->
			</resource>
		</resources>

		<finalName>MySpring Project</finalName>
	</build>

	<!-- 部署项目 -->
	<distributionManagement>
		<repository>
			<id>my-deploy-release</id>
			<name>本地Maven Nexus仓库</name>
			<url>http://127.0.0.1:8081/repository/maven-releases/</url>
			<layout>default</layout>
		</repository>

		<snapshotRepository>
			<id>my-deploy-snapshot</id>
			<name>本地Maven Nexus仓库</name>
			<url>http://127.0.0.1:8081/repository/maven-snapshots/</url>
			<layout>default</layout>
		</snapshotRepository>
	</distributionManagement>

	<!-- release版本发布,-P release -->
	<profiles>
		<profile>
			<id>release</id>
			<properties>
				<project.release.version>2.0</project.release.version>
			</properties>
		</profile>

		<profile>
			<id>dev</id>
			<build>
				<filters>
					<filter>deploy/dev.properties</filter>
				</filters>
			</build>
		</profile>

		<profile>
			<id>sit</id>
			<build>
				<!-- resources和filters，maven中的这两个属性通常是搭配起来使用的，filter这里可以理解为筛选器或者填充器。 
					filters里面可以配置多个filter，但是会以最后一个为准，所以一般只配置一个filter -->
				<filters>
					<filter>deploy/sit.properties</filter>
				</filters>
			</build>
		</profile>

		<!-- 编译JDK1.7 -->
		<profile>
			<id>buildJDK1.7</id>
			<build>
				<plugins>
					<plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-compiler-plugin</artifactId>
						<version>3.8.0</version>
						<configuration>
							<source>1.7</source>
							<target>1.7</target>
							<encoding>UTF-8</encoding>
							<!-- 可以不加 <verbose>true</verbose> <fork>true</fork> <executable>c:\Java\jdk1.7.0_80\jdk1.7.0_80\bin\javac</executable> -->
						</configuration>
					</plugin>
					<!-- 执行BAT命令 -->
					<plugin>
						<groupId>org.codehaus.mojo</groupId>
						<artifactId>exec-maven-plugin</artifactId>
						<version>1.2</version>
						<executions>
							<execution>
								<id>执行Bat批处理命令,install任务阶段</id>
								<!-- 插件执行阶段(install) -->
								<phase>install</phase>
								<goals>
									<goal>exec</goal>
								</goals>
								<configuration>
									<executable>../${project.parent.artifactId}/deploy.bat</executable>
								</configuration>
							</execution>
							<!-- 替换资源文件 -->
							<execution>
							    <id>编辑周期中替换资源文件...</id>
							    <!-- 在编译执行阶段替换 -->
							    <phase>generate-sources</phase>
							   	<goals>
									<goal>run</goal>
								</goals>
								<!-- 具体执行配置 -->
							    <configuration>
									<tasks>
										<echo>替换资源进行中...</echo>
									    <delete file="xxURL/XX.war" />
										<copy file="../xxxURL/xxx.xml" 
										tofile="../xxxURL/xxx.xml" overwrite="true"/>									
									</tasks> 
								</configuration>
							</execution>
						</executions>
					</plugin>
				</plugins>
			</build>
		</profile>
		
        <!-- 构建并移动war文件到tomcat webapps目录下 -->
        <profile>
            <id>buildWar</id>
            <build>
              <plugins>
                     <plugin>
						<groupId>org.apache.maven.plugins</groupId>
						<artifactId>maven-antrun-plugin</artifactId>
						<version>1.8</version>
						<executions>
							<execution>
								<id>执行War包拷贝...</id>
								<phase>install</phase>
								<goals>
									<goal>run</goal>
								</goals>
								<!-- 这样也行 -->
							    <configuration>
									<tasks>
										<echo>拷贝资源进行中...</echo>
										<!-- 删除文件 -->
										<delete file="d:\server\apache-tomcat-7.0.90\webapps\xxx.war" />
										<!-- 删除目录,包含空目录 -->
		                                <delete dir="d:\server\apache-tomcat-7.0.90\webapps\xxx目录" includeemptydirs="true"/>		
										<copy file="d:\eclipse workspace\project\target\xxx.war" 
										tofile="d:\server\apache-tomcat-7.0.90\webapps\xxx.war" overwrite="true"/>									
									</tasks> 
								</configuration>
							</execution>
						</executions>
						<!-- 
						这样也行
					    <configuration>
							<tasks>
								<echo>拷贝资源进行中...</echo>
								<delete file="d:\server\apache-tomcat-7.0.90\webapps\xxx.war" />
                                <delete dir="d:\server\apache-tomcat-7.0.90\webapps\xxx" includeemptydirs="true"/>		
								<copy file="d:\eclipse workspace\project\target\xxx.war" 
								tofile="d:\server\apache-tomcat-7.0.90\webapps\xxx.war" overwrite="true"/>									
							</tasks> 
						</configuration>
						 -->
                      </plugin>
              </plugins>
            </build>
        </profile>
        
	</profiles>

</project>